import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "å­—ç¬¦", verb: "åŒ…å«" },
    file: { unit: "å­—èŠ‚", verb: "åŒ…å«" },
    array: { unit: "é¡¹", verb: "åŒ…å«" },
    set: { unit: "é¡¹", verb: "åŒ…å«" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "éžæ•°å­—(NaN)" : "æ•°å­—";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "æ•°ç»„";
        }
        if (data === null) {
          return "ç©ºå€¼(null)";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "è¾“å…¥",
    email: "ç”µå­é‚®ä»¶",
    url: "URL",
    emoji: "è¡¨æƒ…ç¬¦å·",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISOæ—¥æœŸæ—¶é—´",
    date: "ISOæ—¥æœŸ",
    time: "ISOæ—¶é—´",
    duration: "ISOæ—¶é•¿",
    ipv4: "IPv4åœ°å€",
    ipv6: "IPv6åœ°å€",
    cidrv4: "IPv4ç½‘æ®µ",
    cidrv6: "IPv6ç½‘æ®µ",
    base64: "base64ç¼–ç å­—ç¬¦ä¸²",
    base64url: "base64urlç¼–ç å­—ç¬¦ä¸²",
    json_string: "JSONå­—ç¬¦ä¸²",
    e164: "E.164å·ç ",
    jwt: "JWT",
    template_literal: "è¾“å…¥",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `æ— æ•ˆè¾“å…¥ï¼šæœŸæœ› ${issue.expected}ï¼Œå®žé™…æŽ¥æ”¶ ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `æ— æ•ˆè¾“å…¥ï¼šæœŸæœ› ${util.stringifyPrimitive(issue.values[0])}`;
        return `æ— æ•ˆé€‰é¡¹ï¼šæœŸæœ›ä»¥ä¸‹ä¹‹ä¸€ ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `æ•°å€¼è¿‡å¤§ï¼šæœŸæœ› ${issue.origin ?? "å€¼"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "ä¸ªå…ƒç´ "}`;
        return `æ•°å€¼è¿‡å¤§ï¼šæœŸæœ› ${issue.origin ?? "å€¼"} ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `æ•°å€¼è¿‡å°ï¼šæœŸæœ› ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }
        return `æ•°å€¼è¿‡å°ï¼šæœŸæœ› ${issue.origin} ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `æ— æ•ˆå­—ç¬¦ä¸²ï¼šå¿…é¡»ä»¥ "${_issue.prefix}" å¼€å¤´`;
        if (_issue.format === "ends_with") return `æ— æ•ˆå­—ç¬¦ä¸²ï¼šå¿…é¡»ä»¥ "${_issue.suffix}" ç»“å°¾`;
        if (_issue.format === "includes") return `æ— æ•ˆå­—ç¬¦ä¸²ï¼šå¿…é¡»åŒ…å« "${_issue.includes}"`;
        if (_issue.format === "regex") return `æ— æ•ˆå­—ç¬¦ä¸²ï¼šå¿…é¡»æ»¡è¶³æ­£åˆ™è¡¨è¾¾å¼ ${_issue.pattern}`;
        return `æ— æ•ˆ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `æ— æ•ˆæ•°å­—ï¼šå¿…é¡»æ˜¯ ${issue.divisor} çš„å€æ•°`;
      case "unrecognized_keys":
        return `å‡ºçŽ°æœªçŸ¥çš„é”®(key): ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `${issue.origin} ä¸­çš„é”®(key)æ— æ•ˆ`;
      case "invalid_union":
        return "æ— æ•ˆè¾“å…¥";
      case "invalid_element":
        return `${issue.origin} ä¸­åŒ…å«æ— æ•ˆå€¼(value)`;
      default:
        return `æ— æ•ˆè¾“å…¥`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





