import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "znakÅ¯", verb: "mÃ­t" },
    file: { unit: "bajtÅ¯", verb: "mÃ­t" },
    array: { unit: "prvkÅ¯", verb: "mÃ­t" },
    set: { unit: "prvkÅ¯", verb: "mÃ­t" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "ÄÃ­slo";
      }
      case "string": {
        return "Å™etÄ›zec";
      }
      case "boolean": {
        return "boolean";
      }
      case "bigint": {
        return "bigint";
      }
      case "function": {
        return "funkce";
      }
      case "symbol": {
        return "symbol";
      }
      case "undefined": {
        return "undefined";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "pole";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "regulÃ¡rnÃ­ vÃ½raz",
    email: "e-mailovÃ¡ adresa",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "datum a Äas ve formÃ¡tu ISO",
    date: "datum ve formÃ¡tu ISO",
    time: "Äas ve formÃ¡tu ISO",
    duration: "doba trvÃ¡nÃ­ ISO",
    ipv4: "IPv4 adresa",
    ipv6: "IPv6 adresa",
    cidrv4: "rozsah IPv4",
    cidrv6: "rozsah IPv6",
    base64: "Å™etÄ›zec zakÃ³dovanÃ½ ve formÃ¡tu base64",
    base64url: "Å™etÄ›zec zakÃ³dovanÃ½ ve formÃ¡tu base64url",
    json_string: "Å™etÄ›zec ve formÃ¡tu JSON",
    e164: "ÄÃ­slo E.164",
    jwt: "JWT",
    template_literal: "vstup",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `NeplatnÃ½ vstup: oÄekÃ¡vÃ¡no ${issue.expected}, obdrÅ¾eno ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `NeplatnÃ½ vstup: oÄekÃ¡vÃ¡no ${util.stringifyPrimitive(issue.values[0])}`;
        return `NeplatnÃ¡ moÅ¾nost: oÄekÃ¡vÃ¡na jedna z hodnot ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `Hodnota je pÅ™Ã­liÅ¡ velkÃ¡: ${issue.origin ?? "hodnota"} musÃ­ mÃ­t ${adj}${issue.maximum.toString()} ${sizing.unit ?? "prvkÅ¯"}`;
        }
        return `Hodnota je pÅ™Ã­liÅ¡ velkÃ¡: ${issue.origin ?? "hodnota"} musÃ­ bÃ½t ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `Hodnota je pÅ™Ã­liÅ¡ malÃ¡: ${issue.origin ?? "hodnota"} musÃ­ mÃ­t ${adj}${issue.minimum.toString()} ${sizing.unit ?? "prvkÅ¯"}`;
        }
        return `Hodnota je pÅ™Ã­liÅ¡ malÃ¡: ${issue.origin ?? "hodnota"} musÃ­ bÃ½t ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `NeplatnÃ½ Å™etÄ›zec: musÃ­ zaÄÃ­nat na "${_issue.prefix}"`;
        if (_issue.format === "ends_with") return `NeplatnÃ½ Å™etÄ›zec: musÃ­ konÄit na "${_issue.suffix}"`;
        if (_issue.format === "includes") return `NeplatnÃ½ Å™etÄ›zec: musÃ­ obsahovat "${_issue.includes}"`;
        if (_issue.format === "regex") return `NeplatnÃ½ Å™etÄ›zec: musÃ­ odpovÃ­dat vzoru ${_issue.pattern}`;
        return `NeplatnÃ½ formÃ¡t ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `NeplatnÃ© ÄÃ­slo: musÃ­ bÃ½t nÃ¡sobkem ${issue.divisor}`;
      case "unrecognized_keys":
        return `NeznÃ¡mÃ© klÃ­Äe: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `NeplatnÃ½ klÃ­Ä v ${issue.origin}`;
      case "invalid_union":
        return "NeplatnÃ½ vstup";
      case "invalid_element":
        return `NeplatnÃ¡ hodnota v ${issue.origin}`;
      default:
        return `NeplatnÃ½ vstup`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





