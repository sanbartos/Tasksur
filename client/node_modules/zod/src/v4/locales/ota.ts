import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "harf", verb: "olmalÄ±dÄ±r" },
    file: { unit: "bayt", verb: "olmalÄ±dÄ±r" },
    array: { unit: "unsur", verb: "olmalÄ±dÄ±r" },
    set: { unit: "unsur", verb: "olmalÄ±dÄ±r" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "numara";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "saf";
        }
        if (data === null) {
          return "gayb";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "giren",
    email: "epostagÃ¢h",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO hengÃ¢mÄ±",
    date: "ISO tarihi",
    time: "ISO zamanÄ±",
    duration: "ISO mÃ¼ddeti",
    ipv4: "IPv4 niÅŸÃ¢nÄ±",
    ipv6: "IPv6 niÅŸÃ¢nÄ±",
    cidrv4: "IPv4 menzili",
    cidrv6: "IPv6 menzili",
    base64: "base64-ÅŸifreli metin",
    base64url: "base64url-ÅŸifreli metin",
    json_string: "JSON metin",
    e164: "E.164 sayÄ±sÄ±",
    jwt: "JWT",
    template_literal: "giren",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `FÃ¢sit giren: umulan ${issue.expected}, alÄ±nan ${parsedType(issue.input)}`;
      // return `FÃ¢sit giren: umulan ${issue.expected}, alÄ±nan ${util.getParsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `FÃ¢sit giren: umulan ${util.stringifyPrimitive(issue.values[0])}`;
        return `FÃ¢sit tercih: mÃ»teberler ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `Fazla bÃ¼yÃ¼k: ${issue.origin ?? "value"}, ${adj}${issue.maximum.toString()} ${sizing.unit ?? "elements"} sahip olmalÄ±ydÄ±.`;
        return `Fazla bÃ¼yÃ¼k: ${issue.origin ?? "value"}, ${adj}${issue.maximum.toString()} olmalÄ±ydÄ±.`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `Fazla kÃ¼Ã§Ã¼k: ${issue.origin}, ${adj}${issue.minimum.toString()} ${sizing.unit} sahip olmalÄ±ydÄ±.`;
        }

        return `Fazla kÃ¼Ã§Ã¼k: ${issue.origin}, ${adj}${issue.minimum.toString()} olmalÄ±ydÄ±.`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `FÃ¢sit metin: "${_issue.prefix}" ile baÅŸlamalÄ±.`;
        if (_issue.format === "ends_with") return `FÃ¢sit metin: "${_issue.suffix}" ile bitmeli.`;
        if (_issue.format === "includes") return `FÃ¢sit metin: "${_issue.includes}" ihtivÃ¢ etmeli.`;
        if (_issue.format === "regex") return `FÃ¢sit metin: ${_issue.pattern} nakÅŸÄ±na uymalÄ±.`;
        return `FÃ¢sit ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `FÃ¢sit sayÄ±: ${issue.divisor} katÄ± olmalÄ±ydÄ±.`;
      case "unrecognized_keys":
        return `TanÄ±nmayan anahtar ${issue.keys.length > 1 ? "s" : ""}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `${issue.origin} iÃ§in tanÄ±nmayan anahtar var.`;
      case "invalid_union":
        return "Giren tanÄ±namadÄ±.";
      case "invalid_element":
        return `${issue.origin} iÃ§in tanÄ±nmayan kÄ±ymet var.`;
      default:
        return `KÄ±ymet tanÄ±namadÄ±.`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





