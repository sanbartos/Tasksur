import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "Ð·Ð½Ð°Ñ†Ð¸", verb: "Ð´Ð° Ð¸Ð¼Ð°Ð°Ñ‚" },
    file: { unit: "Ð±Ð°Ñ˜Ñ‚Ð¸", verb: "Ð´Ð° Ð¸Ð¼Ð°Ð°Ñ‚" },
    array: { unit: "ÑÑ‚Ð°Ð²ÐºÐ¸", verb: "Ð´Ð° Ð¸Ð¼Ð°Ð°Ñ‚" },
    set: { unit: "ÑÑ‚Ð°Ð²ÐºÐ¸", verb: "Ð´Ð° Ð¸Ð¼Ð°Ð°Ñ‚" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "Ð±Ñ€Ð¾Ñ˜";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "Ð½Ð¸Ð·Ð°";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "Ð²Ð½ÐµÑ",
    email: "Ð°Ð´Ñ€ÐµÑÐ° Ð½Ð° Ðµ-Ð¿Ð¾ÑˆÑ‚Ð°",
    url: "URL",
    emoji: "ÐµÐ¼Ð¾ÑŸÐ¸",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO Ð´Ð°Ñ‚ÑƒÐ¼ Ð¸ Ð²Ñ€ÐµÐ¼Ðµ",
    date: "ISO Ð´Ð°Ñ‚ÑƒÐ¼",
    time: "ISO Ð²Ñ€ÐµÐ¼Ðµ",
    duration: "ISO Ð²Ñ€ÐµÐ¼ÐµÑ‚Ñ€Ð°ÐµÑšÐµ",
    ipv4: "IPv4 Ð°Ð´Ñ€ÐµÑÐ°",
    ipv6: "IPv6 Ð°Ð´Ñ€ÐµÑÐ°",
    cidrv4: "IPv4 Ð¾Ð¿ÑÐµÐ³",
    cidrv6: "IPv6 Ð¾Ð¿ÑÐµÐ³",
    base64: "base64-ÐµÐ½ÐºÐ¾Ð´Ð¸Ñ€Ð°Ð½Ð° Ð½Ð¸Ð·Ð°",
    base64url: "base64url-ÐµÐ½ÐºÐ¾Ð´Ð¸Ñ€Ð°Ð½Ð° Ð½Ð¸Ð·Ð°",
    json_string: "JSON Ð½Ð¸Ð·Ð°",
    e164: "E.164 Ð±Ñ€Ð¾Ñ˜",
    jwt: "JWT",
    template_literal: "Ð²Ð½ÐµÑ",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `Ð“Ñ€ÐµÑˆÐµÐ½ Ð²Ð½ÐµÑ: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ${issue.expected}, Ð¿Ñ€Ð¸Ð¼ÐµÐ½Ð¾ ${parsedType(issue.input)}`;
      // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `Invalid input: expected ${util.stringifyPrimitive(issue.values[0])}`;
        return `Ð“Ñ€ÐµÑˆÐ°Ð½Ð° Ð¾Ð¿Ñ†Ð¸Ñ˜Ð°: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ÐµÐ´Ð½Ð° ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `ÐŸÑ€ÐµÐ¼Ð½Ð¾Ð³Ñƒ Ð³Ð¾Ð»ÐµÐ¼: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ${issue.origin ?? "Ð²Ñ€ÐµÐ´Ð½Ð¾ÑÑ‚Ð°"} Ð´Ð° Ð¸Ð¼Ð° ${adj}${issue.maximum.toString()} ${sizing.unit ?? "ÐµÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¸"}`;
        return `ÐŸÑ€ÐµÐ¼Ð½Ð¾Ð³Ñƒ Ð³Ð¾Ð»ÐµÐ¼: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ${issue.origin ?? "Ð²Ñ€ÐµÐ´Ð½Ð¾ÑÑ‚Ð°"} Ð´Ð° Ð±Ð¸Ð´Ðµ ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `ÐŸÑ€ÐµÐ¼Ð½Ð¾Ð³Ñƒ Ð¼Ð°Ð»: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ${issue.origin} Ð´Ð° Ð¸Ð¼Ð° ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }

        return `ÐŸÑ€ÐµÐ¼Ð½Ð¾Ð³Ñƒ Ð¼Ð°Ð»: ÑÐµ Ð¾Ñ‡ÐµÐºÑƒÐ²Ð° ${issue.origin} Ð´Ð° Ð±Ð¸Ð´Ðµ ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") {
          return `ÐÐµÐ²Ð°Ð¶ÐµÑ‡ÐºÐ° Ð½Ð¸Ð·Ð°: Ð¼Ð¾Ñ€Ð° Ð´Ð° Ð·Ð°Ð¿Ð¾Ñ‡Ð½ÑƒÐ²Ð° ÑÐ¾ "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with") return `ÐÐµÐ²Ð°Ð¶ÐµÑ‡ÐºÐ° Ð½Ð¸Ð·Ð°: Ð¼Ð¾Ñ€Ð° Ð´Ð° Ð·Ð°Ð²Ñ€ÑˆÑƒÐ²Ð° ÑÐ¾ "${_issue.suffix}"`;
        if (_issue.format === "includes") return `ÐÐµÐ²Ð°Ð¶ÐµÑ‡ÐºÐ° Ð½Ð¸Ð·Ð°: Ð¼Ð¾Ñ€Ð° Ð´Ð° Ð²ÐºÐ»ÑƒÑ‡ÑƒÐ²Ð° "${_issue.includes}"`;
        if (_issue.format === "regex") return `ÐÐµÐ²Ð°Ð¶ÐµÑ‡ÐºÐ° Ð½Ð¸Ð·Ð°: Ð¼Ð¾Ñ€Ð° Ð´Ð° Ð¾Ð´Ð³Ð¾Ð°Ñ€Ð° Ð½Ð° Ð¿Ð°Ñ‚ÐµÑ€Ð½Ð¾Ñ‚ ${_issue.pattern}`;
        return `Invalid ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `Ð“Ñ€ÐµÑˆÐµÐ½ Ð±Ñ€Ð¾Ñ˜: Ð¼Ð¾Ñ€Ð° Ð´Ð° Ð±Ð¸Ð´Ðµ Ð´ÐµÐ»Ð¸Ð² ÑÐ¾ ${issue.divisor}`;
      case "unrecognized_keys":
        return `${issue.keys.length > 1 ? "ÐÐµÐ¿Ñ€ÐµÐ¿Ð¾Ð·Ð½Ð°ÐµÐ½Ð¸ ÐºÐ»ÑƒÑ‡ÐµÐ²Ð¸" : "ÐÐµÐ¿Ñ€ÐµÐ¿Ð¾Ð·Ð½Ð°ÐµÐ½ ÐºÐ»ÑƒÑ‡"}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `Ð“Ñ€ÐµÑˆÐµÐ½ ÐºÐ»ÑƒÑ‡ Ð²Ð¾ ${issue.origin}`;
      case "invalid_union":
        return "Ð“Ñ€ÐµÑˆÐµÐ½ Ð²Ð½ÐµÑ";
      case "invalid_element":
        return `Ð“Ñ€ÐµÑˆÐ½Ð° Ð²Ñ€ÐµÐ´Ð½Ð¾ÑÑ‚ Ð²Ð¾ ${issue.origin}`;
      default:
        return `Ð“Ñ€ÐµÑˆÐµÐ½ Ð²Ð½ÐµÑ`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





