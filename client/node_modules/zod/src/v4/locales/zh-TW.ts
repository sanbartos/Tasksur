import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "å­—å…ƒ", verb: "æ“æœ‰" },
    file: { unit: "ä½å…ƒçµ„", verb: "æ“æœ‰" },
    array: { unit: "é …ç›®", verb: "æ“æœ‰" },
    set: { unit: "é …ç›®", verb: "æ“æœ‰" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "è¼¸å…¥",
    email: "éƒµä»¶åœ°å€",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO æ—¥æœŸæ™‚é–“",
    date: "ISO æ—¥æœŸ",
    time: "ISO æ™‚é–“",
    duration: "ISO æœŸé–“",
    ipv4: "IPv4 ä½å€",
    ipv6: "IPv6 ä½å€",
    cidrv4: "IPv4 ç¯„åœ",
    cidrv6: "IPv6 ç¯„åœ",
    base64: "base64 ç·¨ç¢¼å­—ä¸²",
    base64url: "base64url ç·¨ç¢¼å­—ä¸²",
    json_string: "JSON å­—ä¸²",
    e164: "E.164 æ•¸å€¼",
    jwt: "JWT",
    template_literal: "è¼¸å…¥",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `ç„¡æ•ˆçš„è¼¸å…¥å€¼ï¼šé æœŸç‚º ${issue.expected}ï¼Œä½†æ”¶åˆ° ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `ç„¡æ•ˆçš„è¼¸å…¥å€¼ï¼šé æœŸç‚º ${util.stringifyPrimitive(issue.values[0])}`;
        return `ç„¡æ•ˆçš„é¸é …ï¼šé æœŸç‚ºä»¥ä¸‹å…¶ä¸­ä¹‹ä¸€ ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `æ•¸å€¼éŽå¤§ï¼šé æœŸ ${issue.origin ?? "å€¼"} æ‡‰ç‚º ${adj}${issue.maximum.toString()} ${sizing.unit ?? "å€‹å…ƒç´ "}`;
        return `æ•¸å€¼éŽå¤§ï¼šé æœŸ ${issue.origin ?? "å€¼"} æ‡‰ç‚º ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `æ•¸å€¼éŽå°ï¼šé æœŸ ${issue.origin} æ‡‰ç‚º ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }
        return `æ•¸å€¼éŽå°ï¼šé æœŸ ${issue.origin} æ‡‰ç‚º ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") {
          return `ç„¡æ•ˆçš„å­—ä¸²ï¼šå¿…é ˆä»¥ "${_issue.prefix}" é–‹é ­`;
        }
        if (_issue.format === "ends_with") return `ç„¡æ•ˆçš„å­—ä¸²ï¼šå¿…é ˆä»¥ "${_issue.suffix}" çµå°¾`;
        if (_issue.format === "includes") return `ç„¡æ•ˆçš„å­—ä¸²ï¼šå¿…é ˆåŒ…å« "${_issue.includes}"`;
        if (_issue.format === "regex") return `ç„¡æ•ˆçš„å­—ä¸²ï¼šå¿…é ˆç¬¦åˆæ ¼å¼ ${_issue.pattern}`;
        return `ç„¡æ•ˆçš„ ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `ç„¡æ•ˆçš„æ•¸å­—ï¼šå¿…é ˆç‚º ${issue.divisor} çš„å€æ•¸`;
      case "unrecognized_keys":
        return `ç„¡æ³•è­˜åˆ¥çš„éµå€¼${issue.keys.length > 1 ? "å€‘" : ""}ï¼š${util.joinValues(issue.keys, "ã€")}`;
      case "invalid_key":
        return `${issue.origin} ä¸­æœ‰ç„¡æ•ˆçš„éµå€¼`;
      case "invalid_union":
        return "ç„¡æ•ˆçš„è¼¸å…¥å€¼";
      case "invalid_element":
        return `${issue.origin} ä¸­æœ‰ç„¡æ•ˆçš„å€¼`;
      default:
        return `ç„¡æ•ˆçš„è¼¸å…¥å€¼`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





