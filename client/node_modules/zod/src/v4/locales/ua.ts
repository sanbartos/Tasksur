import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "ÑÐ¸Ð¼Ð²Ð¾Ð»Ñ–Ð²", verb: "Ð¼Ð°Ñ‚Ð¸Ð¼Ðµ" },
    file: { unit: "Ð±Ð°Ð¹Ñ‚Ñ–Ð²", verb: "Ð¼Ð°Ñ‚Ð¸Ð¼Ðµ" },
    array: { unit: "ÐµÐ»ÐµÐ¼ÐµÐ½Ñ‚Ñ–Ð²", verb: "Ð¼Ð°Ñ‚Ð¸Ð¼Ðµ" },
    set: { unit: "ÐµÐ»ÐµÐ¼ÐµÐ½Ñ‚Ñ–Ð²", verb: "Ð¼Ð°Ñ‚Ð¸Ð¼Ðµ" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "Ñ‡Ð¸ÑÐ»Ð¾";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "Ð¼Ð°ÑÐ¸Ð²";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–",
    email: "Ð°Ð´Ñ€ÐµÑÐ° ÐµÐ»ÐµÐºÑ‚Ñ€Ð¾Ð½Ð½Ð¾Ñ— Ð¿Ð¾ÑˆÑ‚Ð¸",
    url: "URL",
    emoji: "ÐµÐ¼Ð¾Ð´Ð·Ñ–",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "Ð´Ð°Ñ‚Ð° Ñ‚Ð° Ñ‡Ð°Ñ ISO",
    date: "Ð´Ð°Ñ‚Ð° ISO",
    time: "Ñ‡Ð°Ñ ISO",
    duration: "Ñ‚Ñ€Ð¸Ð²Ð°Ð»Ñ–ÑÑ‚ÑŒ ISO",
    ipv4: "Ð°Ð´Ñ€ÐµÑÐ° IPv4",
    ipv6: "Ð°Ð´Ñ€ÐµÑÐ° IPv6",
    cidrv4: "Ð´Ñ–Ð°Ð¿Ð°Ð·Ð¾Ð½ IPv4",
    cidrv6: "Ð´Ñ–Ð°Ð¿Ð°Ð·Ð¾Ð½ IPv6",
    base64: "Ñ€ÑÐ´Ð¾Ðº Ñƒ ÐºÐ¾Ð´ÑƒÐ²Ð°Ð½Ð½Ñ– base64",
    base64url: "Ñ€ÑÐ´Ð¾Ðº Ñƒ ÐºÐ¾Ð´ÑƒÐ²Ð°Ð½Ð½Ñ– base64url",
    json_string: "Ñ€ÑÐ´Ð¾Ðº JSON",
    e164: "Ð½Ð¾Ð¼ÐµÑ€ E.164",
    jwt: "JWT",
    template_literal: "Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ– Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ ${issue.expected}, Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ð½Ð¾ ${parsedType(issue.input)}`;
      // return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ– Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ ${issue.expected}, Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ð½Ð¾ ${util.getParsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1)
          return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ– Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ ${util.stringifyPrimitive(issue.values[0])}`;
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð° Ð¾Ð¿Ñ†Ñ–Ñ: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ Ð¾Ð´Ð½Ðµ Ð· ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `Ð—Ð°Ð½Ð°Ð´Ñ‚Ð¾ Ð²ÐµÐ»Ð¸ÐºÐµ: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ, Ñ‰Ð¾ ${issue.origin ?? "Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "ÐµÐ»ÐµÐ¼ÐµÐ½Ñ‚Ñ–Ð²"}`;
        return `Ð—Ð°Ð½Ð°Ð´Ñ‚Ð¾ Ð²ÐµÐ»Ð¸ÐºÐµ: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ, Ñ‰Ð¾ ${issue.origin ?? "Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ"} Ð±ÑƒÐ´Ðµ ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `Ð—Ð°Ð½Ð°Ð´Ñ‚Ð¾ Ð¼Ð°Ð»Ðµ: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ, Ñ‰Ð¾ ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }

        return `Ð—Ð°Ð½Ð°Ð´Ñ‚Ð¾ Ð¼Ð°Ð»Ðµ: Ð¾Ñ‡Ñ–ÐºÑƒÑ”Ñ‚ÑŒÑÑ, Ñ‰Ð¾ ${issue.origin} Ð±ÑƒÐ´Ðµ ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ Ñ€ÑÐ´Ð¾Ðº: Ð¿Ð¾Ð²Ð¸Ð½ÐµÐ½ Ð¿Ð¾Ñ‡Ð¸Ð½Ð°Ñ‚Ð¸ÑÑ Ð· "${_issue.prefix}"`;
        if (_issue.format === "ends_with") return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ Ñ€ÑÐ´Ð¾Ðº: Ð¿Ð¾Ð²Ð¸Ð½ÐµÐ½ Ð·Ð°ÐºÑ–Ð½Ñ‡ÑƒÐ²Ð°Ñ‚Ð¸ÑÑ Ð½Ð° "${_issue.suffix}"`;
        if (_issue.format === "includes") return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ Ñ€ÑÐ´Ð¾Ðº: Ð¿Ð¾Ð²Ð¸Ð½ÐµÐ½ Ð¼Ñ–ÑÑ‚Ð¸Ñ‚Ð¸ "${_issue.includes}"`;
        if (_issue.format === "regex") return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ Ñ€ÑÐ´Ð¾Ðº: Ð¿Ð¾Ð²Ð¸Ð½ÐµÐ½ Ð²Ñ–Ð´Ð¿Ð¾Ð²Ñ–Ð´Ð°Ñ‚Ð¸ ÑˆÐ°Ð±Ð»Ð¾Ð½Ñƒ ${_issue.pattern}`;
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ðµ Ñ‡Ð¸ÑÐ»Ð¾: Ð¿Ð¾Ð²Ð¸Ð½Ð½Ð¾ Ð±ÑƒÑ‚Ð¸ ÐºÑ€Ð°Ñ‚Ð½Ð¸Ð¼ ${issue.divisor}`;
      case "unrecognized_keys":
        return `ÐÐµÑ€Ð¾Ð·Ð¿Ñ–Ð·Ð½Ð°Ð½Ð¸Ð¹ ÐºÐ»ÑŽÑ‡${issue.keys.length > 1 ? "Ñ–" : ""}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¸Ð¹ ÐºÐ»ÑŽÑ‡ Ñƒ ${issue.origin}`;
      case "invalid_union":
        return "ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ– Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–";
      case "invalid_element":
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð½Ñ Ñƒ ${issue.origin}`;
      default:
        return `ÐÐµÐ¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ñ– Ð²Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð°Ð½Ñ–`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





