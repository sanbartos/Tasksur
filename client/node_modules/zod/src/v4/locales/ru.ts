import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

function getRussianPlural(count: number, one: string, few: string, many: string): string {
  const absCount = Math.abs(count);
  const lastDigit = absCount % 10;
  const lastTwoDigits = absCount % 100;

  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return many;
  }

  if (lastDigit === 1) {
    return one;
  }

  if (lastDigit >= 2 && lastDigit <= 4) {
    return few;
  }

  return many;
}

interface RussianSizable {
  unit: {
    one: string;
    few: string;
    many: string;
  };
  verb: string;
}
const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, RussianSizable> = {
    string: {
      unit: {
        one: "ÑÐ¸Ð¼Ð²Ð¾Ð»",
        few: "ÑÐ¸Ð¼Ð²Ð¾Ð»Ð°",
        many: "ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²",
      },
      verb: "Ð¸Ð¼ÐµÑ‚ÑŒ",
    },
    file: {
      unit: {
        one: "Ð±Ð°Ð¹Ñ‚",
        few: "Ð±Ð°Ð¹Ñ‚Ð°",
        many: "Ð±Ð°Ð¹Ñ‚",
      },
      verb: "Ð¸Ð¼ÐµÑ‚ÑŒ",
    },
    array: {
      unit: {
        one: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚",
        few: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°",
        many: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²",
      },
      verb: "Ð¸Ð¼ÐµÑ‚ÑŒ",
    },
    set: {
      unit: {
        one: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚",
        few: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°",
        many: "ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²",
      },
      verb: "Ð¸Ð¼ÐµÑ‚ÑŒ",
    },
  };

  function getSizing(origin: string): RussianSizable | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "Ñ‡Ð¸ÑÐ»Ð¾";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "Ð¼Ð°ÑÑÐ¸Ð²";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "Ð²Ð²Ð¾Ð´",
    email: "email Ð°Ð´Ñ€ÐµÑ",
    url: "URL",
    emoji: "ÑÐ¼Ð¾Ð´Ð·Ð¸",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO Ð´Ð°Ñ‚Ð° Ð¸ Ð²Ñ€ÐµÐ¼Ñ",
    date: "ISO Ð´Ð°Ñ‚Ð°",
    time: "ISO Ð²Ñ€ÐµÐ¼Ñ",
    duration: "ISO Ð´Ð»Ð¸Ñ‚ÐµÐ»ÑŒÐ½Ð¾ÑÑ‚ÑŒ",
    ipv4: "IPv4 Ð°Ð´Ñ€ÐµÑ",
    ipv6: "IPv6 Ð°Ð´Ñ€ÐµÑ",
    cidrv4: "IPv4 Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½",
    cidrv6: "IPv6 Ð´Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½",
    base64: "ÑÑ‚Ñ€Ð¾ÐºÐ° Ð² Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚Ðµ base64",
    base64url: "ÑÑ‚Ñ€Ð¾ÐºÐ° Ð² Ñ„Ð¾Ñ€Ð¼Ð°Ñ‚Ðµ base64url",
    json_string: "JSON ÑÑ‚Ñ€Ð¾ÐºÐ°",
    e164: "Ð½Ð¾Ð¼ÐµÑ€ E.164",
    jwt: "JWT",
    template_literal: "Ð²Ð²Ð¾Ð´",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ð¹ Ð²Ð²Ð¾Ð´: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ ${issue.expected}, Ð¿Ð¾Ð»ÑƒÑ‡ÐµÐ½Ð¾ ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ð¹ Ð²Ð²Ð¾Ð´: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ ${util.stringifyPrimitive(issue.values[0])}`;
        return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ð¹ Ð²Ð°Ñ€Ð¸Ð°Ð½Ñ‚: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ Ð¾Ð´Ð½Ð¾ Ð¸Ð· ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          const maxValue = Number(issue.maximum);
          const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Ð¡Ð»Ð¸ÑˆÐºÐ¾Ð¼ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ, Ñ‡Ñ‚Ð¾ ${issue.origin ?? "Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ"} Ð±ÑƒÐ´ÐµÑ‚ Ð¸Ð¼ÐµÑ‚ÑŒ ${adj}${issue.maximum.toString()} ${unit}`;
        }
        return `Ð¡Ð»Ð¸ÑˆÐºÐ¾Ð¼ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ, Ñ‡Ñ‚Ð¾ ${issue.origin ?? "Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ"} Ð±ÑƒÐ´ÐµÑ‚ ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          const minValue = Number(issue.minimum);
          const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);
          return `Ð¡Ð»Ð¸ÑˆÐºÐ¾Ð¼ Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ, Ñ‡Ñ‚Ð¾ ${issue.origin} Ð±ÑƒÐ´ÐµÑ‚ Ð¸Ð¼ÐµÑ‚ÑŒ ${adj}${issue.minimum.toString()} ${unit}`;
        }
        return `Ð¡Ð»Ð¸ÑˆÐºÐ¾Ð¼ Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÐ¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ: Ð¾Ð¶Ð¸Ð´Ð°Ð»Ð¾ÑÑŒ, Ñ‡Ñ‚Ð¾ ${issue.origin} Ð±ÑƒÐ´ÐµÑ‚ ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `ÐÐµÐ²ÐµÑ€Ð½Ð°Ñ ÑÑ‚Ñ€Ð¾ÐºÐ°: Ð´Ð¾Ð»Ð¶Ð½Ð° Ð½Ð°Ñ‡Ð¸Ð½Ð°Ñ‚ÑŒÑÑ Ñ "${_issue.prefix}"`;
        if (_issue.format === "ends_with") return `ÐÐµÐ²ÐµÑ€Ð½Ð°Ñ ÑÑ‚Ñ€Ð¾ÐºÐ°: Ð´Ð¾Ð»Ð¶Ð½Ð° Ð·Ð°ÐºÐ°Ð½Ñ‡Ð¸Ð²Ð°Ñ‚ÑŒÑÑ Ð½Ð° "${_issue.suffix}"`;
        if (_issue.format === "includes") return `ÐÐµÐ²ÐµÑ€Ð½Ð°Ñ ÑÑ‚Ñ€Ð¾ÐºÐ°: Ð´Ð¾Ð»Ð¶Ð½Ð° ÑÐ¾Ð´ÐµÑ€Ð¶Ð°Ñ‚ÑŒ "${_issue.includes}"`;
        if (_issue.format === "regex") return `ÐÐµÐ²ÐµÑ€Ð½Ð°Ñ ÑÑ‚Ñ€Ð¾ÐºÐ°: Ð´Ð¾Ð»Ð¶Ð½Ð° ÑÐ¾Ð¾Ñ‚Ð²ÐµÑ‚ÑÑ‚Ð²Ð¾Ð²Ð°Ñ‚ÑŒ ÑˆÐ°Ð±Ð»Ð¾Ð½Ñƒ ${_issue.pattern}`;
        return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ð¹ ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `ÐÐµÐ²ÐµÑ€Ð½Ð¾Ðµ Ñ‡Ð¸ÑÐ»Ð¾: Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ ÐºÑ€Ð°Ñ‚Ð½Ñ‹Ð¼ ${issue.divisor}`;
      case "unrecognized_keys":
        return `ÐÐµÑ€Ð°ÑÐ¿Ð¾Ð·Ð½Ð°Ð½Ð½${issue.keys.length > 1 ? "Ñ‹Ðµ" : "Ñ‹Ð¹"} ÐºÐ»ÑŽÑ‡${issue.keys.length > 1 ? "Ð¸" : ""}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ð¹ ÐºÐ»ÑŽÑ‡ Ð² ${issue.origin}`;
      case "invalid_union":
        return "ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ðµ Ð²Ñ…Ð¾Ð´Ð½Ñ‹Ðµ Ð´Ð°Ð½Ð½Ñ‹Ðµ";
      case "invalid_element":
        return `ÐÐµÐ²ÐµÑ€Ð½Ð¾Ðµ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ Ð² ${issue.origin}`;
      default:
        return `ÐÐµÐ²ÐµÑ€Ð½Ñ‹Ðµ Ð²Ñ…Ð¾Ð´Ð½Ñ‹Ðµ Ð´Ð°Ð½Ð½Ñ‹Ðµ`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





