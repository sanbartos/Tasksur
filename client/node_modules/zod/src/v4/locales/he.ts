import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "××•×ª×™×•×ª", verb: "×œ×›×œ×•×œ" },
    file: { unit: "×‘×™×™×˜×™×", verb: "×œ×›×œ×•×œ" },
    array: { unit: "×¤×¨×™×˜×™×", verb: "×œ×›×œ×•×œ" },
    set: { unit: "×¤×¨×™×˜×™×", verb: "×œ×›×œ×•×œ" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "×§×œ×˜",
    email: "×›×ª×•×‘×ª ××™×ž×™×™×œ",
    url: "×›×ª×•×‘×ª ×¨×©×ª",
    emoji: "××™×ž×•×’'×™",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "×ª××¨×™×š ×•×–×ž×Ÿ ISO",
    date: "×ª××¨×™×š ISO",
    time: "×–×ž×Ÿ ISO",
    duration: "×ž×©×š ×–×ž×Ÿ ISO",
    ipv4: "×›×ª×•×‘×ª IPv4",
    ipv6: "×›×ª×•×‘×ª IPv6",
    cidrv4: "×˜×•×•×— IPv4",
    cidrv6: "×˜×•×•×— IPv6",
    base64: "×ž×—×¨×•×–×ª ×‘×‘×¡×™×¡ 64",
    base64url: "×ž×—×¨×•×–×ª ×‘×‘×¡×™×¡ 64 ×œ×›×ª×•×‘×•×ª ×¨×©×ª",
    json_string: "×ž×—×¨×•×–×ª JSON",
    e164: "×ž×¡×¤×¨ E.164",
    jwt: "JWT",
    template_literal: "×§×œ×˜",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `×§×œ×˜ ×œ× ×ª×§×™×Ÿ: ×¦×¨×™×š ${issue.expected}, ×”×ª×§×‘×œ ${parsedType(issue.input)}`;
      // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `×§×œ×˜ ×œ× ×ª×§×™×Ÿ: ×¦×¨×™×š ${util.stringifyPrimitive(issue.values[0])}`;
        return `×§×œ×˜ ×œ× ×ª×§×™×Ÿ: ×¦×¨×™×š ××—×ª ×ž×”××¤×©×¨×•×™×•×ª  ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `×’×“×•×œ ×ž×“×™: ${issue.origin ?? "value"} ×¦×¨×™×š ×œ×”×™×•×ª ${adj}${issue.maximum.toString()} ${sizing.unit ?? "elements"}`;
        return `×’×“×•×œ ×ž×“×™: ${issue.origin ?? "value"} ×¦×¨×™×š ×œ×”×™×•×ª ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `×§×˜×Ÿ ×ž×“×™: ${issue.origin} ×¦×¨×™×š ×œ×”×™×•×ª ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }

        return `×§×˜×Ÿ ×ž×“×™: ${issue.origin} ×¦×¨×™×š ×œ×”×™×•×ª ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `×ž×—×¨×•×–×ª ×œ× ×ª×§×™× ×”: ×—×™×™×‘×ª ×œ×”×ª×—×™×œ ×‘"${_issue.prefix}"`;
        if (_issue.format === "ends_with") return `×ž×—×¨×•×–×ª ×œ× ×ª×§×™× ×”: ×—×™×™×‘×ª ×œ×”×¡×ª×™×™× ×‘ "${_issue.suffix}"`;
        if (_issue.format === "includes") return `×ž×—×¨×•×–×ª ×œ× ×ª×§×™× ×”: ×—×™×™×‘×ª ×œ×›×œ×•×œ "${_issue.includes}"`;
        if (_issue.format === "regex") return `×ž×—×¨×•×–×ª ×œ× ×ª×§×™× ×”: ×—×™×™×‘×ª ×œ×”×ª××™× ×œ×ª×‘× ×™×ª ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue.format} ×œ× ×ª×§×™×Ÿ`;
      }
      case "not_multiple_of":
        return `×ž×¡×¤×¨ ×œ× ×ª×§×™×Ÿ: ×—×™×™×‘ ×œ×”×™×•×ª ×ž×›×¤×œ×” ×©×œ ${issue.divisor}`;
      case "unrecognized_keys":
        return `×ž×¤×ª×—${issue.keys.length > 1 ? "×•×ª" : ""} ×œ× ×ž×–×•×”${issue.keys.length > 1 ? "×™×" : "×”"}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `×ž×¤×ª×— ×œ× ×ª×§×™×Ÿ ×‘${issue.origin}`;
      case "invalid_union":
        return "×§×œ×˜ ×œ× ×ª×§×™×Ÿ";
      case "invalid_element":
        return `×¢×¨×š ×œ× ×ª×§×™×Ÿ ×‘${issue.origin}`;
      default:
        return `×§×œ×˜ ×œ× ×ª×§×™×Ÿ`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





