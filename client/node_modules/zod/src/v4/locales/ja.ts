import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "æ–‡å­—", verb: "ã§ã‚ã‚‹" },
    file: { unit: "ãƒã‚¤ãƒˆ", verb: "ã§ã‚ã‚‹" },
    array: { unit: "è¦ç´ ", verb: "ã§ã‚ã‚‹" },
    set: { unit: "è¦ç´ ", verb: "ã§ã‚ã‚‹" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "æ•°å€¤";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "é…åˆ—";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "å…¥åŠ›å€¤",
    email: "ãƒ¡ãƒ¼ãƒ«ã‚¢ãƒ‰ãƒ¬ã‚¹",
    url: "URL",
    emoji: "çµµæ–‡å­—",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISOæ—¥æ™‚",
    date: "ISOæ—¥ä»˜",
    time: "ISOæ™‚åˆ»",
    duration: "ISOæœŸé–“",
    ipv4: "IPv4ã‚¢ãƒ‰ãƒ¬ã‚¹",
    ipv6: "IPv6ã‚¢ãƒ‰ãƒ¬ã‚¹",
    cidrv4: "IPv4ç¯„å›²",
    cidrv6: "IPv6ç¯„å›²",
    base64: "base64ã‚¨ãƒ³ã‚³ãƒ¼ãƒ‰æ–‡å­—åˆ—",
    base64url: "base64urlã‚¨ãƒ³ã‚³ãƒ¼ãƒ‰æ–‡å­—åˆ—",
    json_string: "JSONæ–‡å­—åˆ—",
    e164: "E.164ç•ªå·",
    jwt: "JWT",
    template_literal: "å…¥åŠ›å€¤",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `ç„¡åŠ¹ãªå…¥åŠ›: ${issue.expected}ãŒæœŸå¾…ã•ã‚Œã¾ã—ãŸãŒã€${parsedType(issue.input)}ãŒå…¥åŠ›ã•ã‚Œã¾ã—ãŸ`;
      case "invalid_value":
        if (issue.values.length === 1) return `ç„¡åŠ¹ãªå…¥åŠ›: ${util.stringifyPrimitive(issue.values[0])}ãŒæœŸå¾…ã•ã‚Œã¾ã—ãŸ`;
        return `ç„¡åŠ¹ãªé¸æŠž: ${util.joinValues(issue.values, "ã€")}ã®ã„ãšã‚Œã‹ã§ã‚ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™`;
      case "too_big": {
        const adj = issue.inclusive ? "ä»¥ä¸‹ã§ã‚ã‚‹" : "ã‚ˆã‚Šå°ã•ã„";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `å¤§ãã™ãŽã‚‹å€¤: ${issue.origin ?? "å€¤"}ã¯${issue.maximum.toString()}${sizing.unit ?? "è¦ç´ "}${adj}å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        return `å¤§ãã™ãŽã‚‹å€¤: ${issue.origin ?? "å€¤"}ã¯${issue.maximum.toString()}${adj}å¿…è¦ãŒã‚ã‚Šã¾ã™`;
      }
      case "too_small": {
        const adj = issue.inclusive ? "ä»¥ä¸Šã§ã‚ã‚‹" : "ã‚ˆã‚Šå¤§ãã„";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `å°ã•ã™ãŽã‚‹å€¤: ${issue.origin}ã¯${issue.minimum.toString()}${sizing.unit}${adj}å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        return `å°ã•ã™ãŽã‚‹å€¤: ${issue.origin}ã¯${issue.minimum.toString()}${adj}å¿…è¦ãŒã‚ã‚Šã¾ã™`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `ç„¡åŠ¹ãªæ–‡å­—åˆ—: "${_issue.prefix}"ã§å§‹ã¾ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        if (_issue.format === "ends_with") return `ç„¡åŠ¹ãªæ–‡å­—åˆ—: "${_issue.suffix}"ã§çµ‚ã‚ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        if (_issue.format === "includes") return `ç„¡åŠ¹ãªæ–‡å­—åˆ—: "${_issue.includes}"ã‚’å«ã‚€å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        if (_issue.format === "regex") return `ç„¡åŠ¹ãªæ–‡å­—åˆ—: ãƒ‘ã‚¿ãƒ¼ãƒ³${_issue.pattern}ã«ä¸€è‡´ã™ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™`;
        return `ç„¡åŠ¹ãª${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `ç„¡åŠ¹ãªæ•°å€¤: ${issue.divisor}ã®å€æ•°ã§ã‚ã‚‹å¿…è¦ãŒã‚ã‚Šã¾ã™`;
      case "unrecognized_keys":
        return `èªè­˜ã•ã‚Œã¦ã„ãªã„ã‚­ãƒ¼${issue.keys.length > 1 ? "ç¾¤" : ""}: ${util.joinValues(issue.keys, "ã€")}`;
      case "invalid_key":
        return `${issue.origin}å†…ã®ç„¡åŠ¹ãªã‚­ãƒ¼`;
      case "invalid_union":
        return "ç„¡åŠ¹ãªå…¥åŠ›";
      case "invalid_element":
        return `${issue.origin}å†…ã®ç„¡åŠ¹ãªå€¤`;
      default:
        return `ç„¡åŠ¹ãªå…¥åŠ›`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





