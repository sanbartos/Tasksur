import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "kÃ½ tá»±", verb: "cÃ³" },
    file: { unit: "byte", verb: "cÃ³" },
    array: { unit: "pháº§n tá»­", verb: "cÃ³" },
    set: { unit: "pháº§n tá»­", verb: "cÃ³" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "sá»‘";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "máº£ng";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "Ä‘áº§u vÃ o",
    email: "Ä‘á»‹a chá»‰ email",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ngÃ y giá» ISO",
    date: "ngÃ y ISO",
    time: "giá» ISO",
    duration: "khoáº£ng thá»i gian ISO",
    ipv4: "Ä‘á»‹a chá»‰ IPv4",
    ipv6: "Ä‘á»‹a chá»‰ IPv6",
    cidrv4: "dáº£i IPv4",
    cidrv6: "dáº£i IPv6",
    base64: "chuá»—i mÃ£ hÃ³a base64",
    base64url: "chuá»—i mÃ£ hÃ³a base64url",
    json_string: "chuá»—i JSON",
    e164: "sá»‘ E.164",
    jwt: "JWT",
    template_literal: "Ä‘áº§u vÃ o",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `Äáº§u vÃ o khÃ´ng há»£p lá»‡: mong Ä‘á»£i ${issue.expected}, nháº­n Ä‘Æ°á»£c ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1)
          return `Äáº§u vÃ o khÃ´ng há»£p lá»‡: mong Ä‘á»£i ${util.stringifyPrimitive(issue.values[0])}`;
        return `TÃ¹y chá»n khÃ´ng há»£p lá»‡: mong Ä‘á»£i má»™t trong cÃ¡c giÃ¡ trá»‹ ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `QuÃ¡ lá»›n: mong Ä‘á»£i ${issue.origin ?? "giÃ¡ trá»‹"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "pháº§n tá»­"}`;
        return `QuÃ¡ lá»›n: mong Ä‘á»£i ${issue.origin ?? "giÃ¡ trá»‹"} ${adj}${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `QuÃ¡ nhá»: mong Ä‘á»£i ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
        }

        return `QuÃ¡ nhá»: mong Ä‘á»£i ${issue.origin} ${adj}${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `Chuá»—i khÃ´ng há»£p lá»‡: pháº£i báº¯t Ä‘áº§u báº±ng "${_issue.prefix}"`;
        if (_issue.format === "ends_with") return `Chuá»—i khÃ´ng há»£p lá»‡: pháº£i káº¿t thÃºc báº±ng "${_issue.suffix}"`;
        if (_issue.format === "includes") return `Chuá»—i khÃ´ng há»£p lá»‡: pháº£i bao gá»“m "${_issue.includes}"`;
        if (_issue.format === "regex") return `Chuá»—i khÃ´ng há»£p lá»‡: pháº£i khá»›p vá»›i máº«u ${_issue.pattern}`;
        return `${Nouns[_issue.format] ?? issue.format} khÃ´ng há»£p lá»‡`;
      }
      case "not_multiple_of":
        return `Sá»‘ khÃ´ng há»£p lá»‡: pháº£i lÃ  bá»™i sá»‘ cá»§a ${issue.divisor}`;
      case "unrecognized_keys":
        return `KhÃ³a khÃ´ng Ä‘Æ°á»£c nháº­n dáº¡ng: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `KhÃ³a khÃ´ng há»£p lá»‡ trong ${issue.origin}`;
      case "invalid_union":
        return "Äáº§u vÃ o khÃ´ng há»£p lá»‡";
      case "invalid_element":
        return `GiÃ¡ trá»‹ khÃ´ng há»£p lá»‡ trong ${issue.origin}`;
      default:
        return `Äáº§u vÃ o khÃ´ng há»£p lá»‡`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





