import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "à®Žà®´à¯à®¤à¯à®¤à¯à®•à¯à®•à®³à¯", verb: "à®•à¯Šà®£à¯à®Ÿà®¿à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯" },
    file: { unit: "à®ªà¯ˆà®Ÿà¯à®Ÿà¯à®•à®³à¯", verb: "à®•à¯Šà®£à¯à®Ÿà®¿à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯" },
    array: { unit: "à®‰à®±à¯à®ªà¯à®ªà¯à®•à®³à¯", verb: "à®•à¯Šà®£à¯à®Ÿà®¿à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯" },
    set: { unit: "à®‰à®±à¯à®ªà¯à®ªà¯à®•à®³à¯", verb: "à®•à¯Šà®£à¯à®Ÿà®¿à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "à®Žà®£à¯ à®…à®²à¯à®²à®¾à®¤à®¤à¯" : "à®Žà®£à¯";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "à®…à®£à®¿";
        }
        if (data === null) {
          return "à®µà¯†à®±à¯à®®à¯ˆ";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "à®‰à®³à¯à®³à¯€à®Ÿà¯",
    email: "à®®à®¿à®©à¯à®©à®žà¯à®šà®²à¯ à®®à¯à®•à®µà®°à®¿",
    url: "URL",
    emoji: "emoji",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO à®¤à¯‡à®¤à®¿ à®¨à¯‡à®°à®®à¯",
    date: "ISO à®¤à¯‡à®¤à®¿",
    time: "ISO à®¨à¯‡à®°à®®à¯",
    duration: "ISO à®•à®¾à®² à®…à®³à®µà¯",
    ipv4: "IPv4 à®®à¯à®•à®µà®°à®¿",
    ipv6: "IPv6 à®®à¯à®•à®µà®°à®¿",
    cidrv4: "IPv4 à®µà®°à®®à¯à®ªà¯",
    cidrv6: "IPv6 à®µà®°à®®à¯à®ªà¯",
    base64: "base64-encoded à®šà®°à®®à¯",
    base64url: "base64url-encoded à®šà®°à®®à¯",
    json_string: "JSON à®šà®°à®®à¯",
    e164: "E.164 à®Žà®£à¯",
    jwt: "JWT",
    template_literal: "input",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `à®¤à®µà®±à®¾à®© à®‰à®³à¯à®³à¯€à®Ÿà¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${issue.expected}, à®ªà¯†à®±à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `à®¤à®µà®±à®¾à®© à®‰à®³à¯à®³à¯€à®Ÿà¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${util.stringifyPrimitive(issue.values[0])}`;
        return `à®¤à®µà®±à®¾à®© à®µà®¿à®°à¯à®ªà¯à®ªà®®à¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${util.joinValues(issue.values, "|")} à®‡à®²à¯ à®’à®©à¯à®±à¯`;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `à®®à®¿à®• à®ªà¯†à®°à®¿à®¯à®¤à¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${issue.origin ?? "à®®à®¤à®¿à®ªà¯à®ªà¯"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "à®‰à®±à¯à®ªà¯à®ªà¯à®•à®³à¯"} à®†à®• à®‡à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
        }
        return `à®®à®¿à®• à®ªà¯†à®°à®¿à®¯à®¤à¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${issue.origin ?? "à®®à®¤à®¿à®ªà¯à®ªà¯"} ${adj}${issue.maximum.toString()} à®†à®• à®‡à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `à®®à®¿à®•à®šà¯ à®šà®¿à®±à®¿à®¯à®¤à¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} à®†à®• à®‡à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`; //
        }

        return `à®®à®¿à®•à®šà¯ à®šà®¿à®±à®¿à®¯à®¤à¯: à®Žà®¤à®¿à®°à¯à®ªà®¾à®°à¯à®•à¯à®•à®ªà¯à®ªà®Ÿà¯à®Ÿà®¤à¯ ${issue.origin} ${adj}${issue.minimum.toString()} à®†à®• à®‡à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") return `à®¤à®µà®±à®¾à®© à®šà®°à®®à¯: "${_issue.prefix}" à®‡à®²à¯ à®¤à¯Šà®Ÿà®™à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
        if (_issue.format === "ends_with") return `à®¤à®µà®±à®¾à®© à®šà®°à®®à¯: "${_issue.suffix}" à®‡à®²à¯ à®®à¯à®Ÿà®¿à®µà®Ÿà¯ˆà®¯ à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
        if (_issue.format === "includes") return `à®¤à®µà®±à®¾à®© à®šà®°à®®à¯: "${_issue.includes}" à® à®‰à®³à¯à®³à®Ÿà®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
        if (_issue.format === "regex") return `à®¤à®µà®±à®¾à®© à®šà®°à®®à¯: ${_issue.pattern} à®®à¯à®±à¯ˆà®ªà®¾à®Ÿà¯à®Ÿà¯à®Ÿà®©à¯ à®ªà¯Šà®°à¯à®¨à¯à®¤ à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
        return `à®¤à®µà®±à®¾à®© ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `à®¤à®µà®±à®¾à®© à®Žà®£à¯: ${issue.divisor} à®‡à®©à¯ à®ªà®²à®®à®¾à®• à®‡à®°à¯à®•à¯à®• à®µà¯‡à®£à¯à®Ÿà¯à®®à¯`;
      case "unrecognized_keys":
        return `à®…à®Ÿà¯ˆà®¯à®¾à®³à®®à¯ à®¤à¯†à®°à®¿à®¯à®¾à®¤ à®µà®¿à®šà¯ˆ${issue.keys.length > 1 ? "à®•à®³à¯" : ""}: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `${issue.origin} à®‡à®²à¯ à®¤à®µà®±à®¾à®© à®µà®¿à®šà¯ˆ`;
      case "invalid_union":
        return "à®¤à®µà®±à®¾à®© à®‰à®³à¯à®³à¯€à®Ÿà¯";
      case "invalid_element":
        return `${issue.origin} à®‡à®²à¯ à®¤à®µà®±à®¾à®© à®®à®¤à®¿à®ªà¯à®ªà¯`;
      default:
        return `à®¤à®µà®±à®¾à®© à®‰à®³à¯à®³à¯€à®Ÿà¯`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





