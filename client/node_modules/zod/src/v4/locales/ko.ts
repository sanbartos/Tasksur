import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "ë¬¸ìž", verb: "to have" },
    file: { unit: "ë°”ì´íŠ¸", verb: "to have" },
    array: { unit: "ê°œ", verb: "to have" },
    set: { unit: "ê°œ", verb: "to have" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "number";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "array";
        }
        if (data === null) {
          return "null";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "ìž…ë ¥",
    email: "ì´ë©”ì¼ ì£¼ì†Œ",
    url: "URL",
    emoji: "ì´ëª¨ì§€",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "ISO ë‚ ì§œì‹œê°„",
    date: "ISO ë‚ ì§œ",
    time: "ISO ì‹œê°„",
    duration: "ISO ê¸°ê°„",
    ipv4: "IPv4 ì£¼ì†Œ",
    ipv6: "IPv6 ì£¼ì†Œ",
    cidrv4: "IPv4 ë²”ìœ„",
    cidrv6: "IPv6 ë²”ìœ„",
    base64: "base64 ì¸ì½”ë”© ë¬¸ìžì—´",
    base64url: "base64url ì¸ì½”ë”© ë¬¸ìžì—´",
    json_string: "JSON ë¬¸ìžì—´",
    e164: "E.164 ë²ˆí˜¸",
    jwt: "JWT",
    template_literal: "ìž…ë ¥",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `ìž˜ëª»ëœ ìž…ë ¥: ì˜ˆìƒ íƒ€ìž…ì€ ${issue.expected}, ë°›ì€ íƒ€ìž…ì€ ${parsedType(issue.input)}ìž…ë‹ˆë‹¤`;
      case "invalid_value":
        if (issue.values.length === 1)
          return `ìž˜ëª»ëœ ìž…ë ¥: ê°’ì€ ${util.stringifyPrimitive(issue.values[0])} ì´ì–´ì•¼ í•©ë‹ˆë‹¤`;
        return `ìž˜ëª»ëœ ì˜µì…˜: ${util.joinValues(issue.values, "ë˜ëŠ” ")} ì¤‘ í•˜ë‚˜ì—¬ì•¼ í•©ë‹ˆë‹¤`;
      case "too_big": {
        const adj = issue.inclusive ? "ì´í•˜" : "ë¯¸ë§Œ";
        const suffix = adj === "ë¯¸ë§Œ" ? "ì´ì–´ì•¼ í•©ë‹ˆë‹¤" : "ì—¬ì•¼ í•©ë‹ˆë‹¤";
        const sizing = getSizing(issue.origin);
        const unit = sizing?.unit ?? "ìš”ì†Œ";
        if (sizing) return `${issue.origin ?? "ê°’"}ì´ ë„ˆë¬´ í½ë‹ˆë‹¤: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;

        return `${issue.origin ?? "ê°’"}ì´ ë„ˆë¬´ í½ë‹ˆë‹¤: ${issue.maximum.toString()} ${adj}${suffix}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? "ì´ìƒ" : "ì´ˆê³¼";
        const suffix = adj === "ì´ìƒ" ? "ì´ì–´ì•¼ í•©ë‹ˆë‹¤" : "ì—¬ì•¼ í•©ë‹ˆë‹¤";
        const sizing = getSizing(issue.origin);
        const unit = sizing?.unit ?? "ìš”ì†Œ";
        if (sizing) {
          return `${issue.origin ?? "ê°’"}ì´ ë„ˆë¬´ ìž‘ìŠµë‹ˆë‹¤: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;
        }

        return `${issue.origin ?? "ê°’"}ì´ ë„ˆë¬´ ìž‘ìŠµë‹ˆë‹¤: ${issue.minimum.toString()} ${adj}${suffix}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") {
          return `ìž˜ëª»ëœ ë¬¸ìžì—´: "${_issue.prefix}"(ìœ¼)ë¡œ ì‹œìž‘í•´ì•¼ í•©ë‹ˆë‹¤`;
        }
        if (_issue.format === "ends_with") return `ìž˜ëª»ëœ ë¬¸ìžì—´: "${_issue.suffix}"(ìœ¼)ë¡œ ëë‚˜ì•¼ í•©ë‹ˆë‹¤`;
        if (_issue.format === "includes") return `ìž˜ëª»ëœ ë¬¸ìžì—´: "${_issue.includes}"ì„(ë¥¼) í¬í•¨í•´ì•¼ í•©ë‹ˆë‹¤`;
        if (_issue.format === "regex") return `ìž˜ëª»ëœ ë¬¸ìžì—´: ì •ê·œì‹ ${_issue.pattern} íŒ¨í„´ê³¼ ì¼ì¹˜í•´ì•¼ í•©ë‹ˆë‹¤`;
        return `ìž˜ëª»ëœ ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `ìž˜ëª»ëœ ìˆ«ìž: ${issue.divisor}ì˜ ë°°ìˆ˜ì—¬ì•¼ í•©ë‹ˆë‹¤`;
      case "unrecognized_keys":
        return `ì¸ì‹í•  ìˆ˜ ì—†ëŠ” í‚¤: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `ìž˜ëª»ëœ í‚¤: ${issue.origin}`;
      case "invalid_union":
        return `ìž˜ëª»ëœ ìž…ë ¥`;
      case "invalid_element":
        return `ìž˜ëª»ëœ ê°’: ${issue.origin}`;
      default:
        return `ìž˜ëª»ëœ ìž…ë ¥`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





