import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "à¸•à¸±à¸§à¸­à¸±à¸à¸©à¸£", verb: "à¸„à¸§à¸£à¸¡à¸µ" },
    file: { unit: "à¹„à¸šà¸•à¹Œ", verb: "à¸„à¸§à¸£à¸¡à¸µ" },
    array: { unit: "à¸£à¸²à¸¢à¸à¸²à¸£", verb: "à¸„à¸§à¸£à¸¡à¸µ" },
    set: { unit: "à¸£à¸²à¸¢à¸à¸²à¸£", verb: "à¸„à¸§à¸£à¸¡à¸µ" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "à¹„à¸¡à¹ˆà¹ƒà¸Šà¹ˆà¸•à¸±à¸§à¹€à¸¥à¸‚ (NaN)" : "à¸•à¸±à¸§à¹€à¸¥à¸‚";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "à¸­à¸²à¸£à¹Œà¹€à¸£à¸¢à¹Œ (Array)";
        }
        if (data === null) {
          return "à¹„à¸¡à¹ˆà¸¡à¸µà¸„à¹ˆà¸² (null)";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: "à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¸—à¸µà¹ˆà¸›à¹‰à¸­à¸™",
    email: "à¸—à¸µà¹ˆà¸­à¸¢à¸¹à¹ˆà¸­à¸µà¹€à¸¡à¸¥",
    url: "URL",
    emoji: "à¸­à¸´à¹‚à¸¡à¸ˆà¸´",
    uuid: "UUID",
    uuidv4: "UUIDv4",
    uuidv6: "UUIDv6",
    nanoid: "nanoid",
    guid: "GUID",
    cuid: "cuid",
    cuid2: "cuid2",
    ulid: "ULID",
    xid: "XID",
    ksuid: "KSUID",
    datetime: "à¸§à¸±à¸™à¸—à¸µà¹ˆà¹€à¸§à¸¥à¸²à¹à¸šà¸š ISO",
    date: "à¸§à¸±à¸™à¸—à¸µà¹ˆà¹à¸šà¸š ISO",
    time: "à¹€à¸§à¸¥à¸²à¹à¸šà¸š ISO",
    duration: "à¸Šà¹ˆà¸§à¸‡à¹€à¸§à¸¥à¸²à¹à¸šà¸š ISO",
    ipv4: "à¸—à¸µà¹ˆà¸­à¸¢à¸¹à¹ˆ IPv4",
    ipv6: "à¸—à¸µà¹ˆà¸­à¸¢à¸¹à¹ˆ IPv6",
    cidrv4: "à¸Šà¹ˆà¸§à¸‡ IP à¹à¸šà¸š IPv4",
    cidrv6: "à¸Šà¹ˆà¸§à¸‡ IP à¹à¸šà¸š IPv6",
    base64: "à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¹à¸šà¸š Base64",
    base64url: "à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¹à¸šà¸š Base64 à¸ªà¸³à¸«à¸£à¸±à¸š URL",
    json_string: "à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¹à¸šà¸š JSON",
    e164: "à¹€à¸šà¸­à¸£à¹Œà¹‚à¸—à¸£à¸¨à¸±à¸žà¸—à¹Œà¸£à¸°à¸«à¸§à¹ˆà¸²à¸‡à¸›à¸£à¸°à¹€à¸—à¸¨ (E.164)",
    jwt: "à¹‚à¸—à¹€à¸„à¸™ JWT",
    template_literal: "à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¸—à¸µà¹ˆà¸›à¹‰à¸­à¸™",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `à¸›à¸£à¸°à¹€à¸ à¸—à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸„à¸§à¸£à¹€à¸›à¹‡à¸™ ${issue.expected} à¹à¸•à¹ˆà¹„à¸”à¹‰à¸£à¸±à¸š ${parsedType(issue.input)}`;
      case "invalid_value":
        if (issue.values.length === 1) return `à¸„à¹ˆà¸²à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸„à¸§à¸£à¹€à¸›à¹‡à¸™ ${util.stringifyPrimitive(issue.values[0])}`;
        return `à¸•à¸±à¸§à¹€à¸¥à¸·à¸­à¸à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸„à¸§à¸£à¹€à¸›à¹‡à¸™à¸«à¸™à¸¶à¹ˆà¸‡à¹ƒà¸™ ${util.joinValues(issue.values, "|")}`;
      case "too_big": {
        const adj = issue.inclusive ? "à¹„à¸¡à¹ˆà¹€à¸à¸´à¸™" : "à¸™à¹‰à¸­à¸¢à¸à¸§à¹ˆà¸²";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return `à¹€à¸à¸´à¸™à¸à¸³à¸«à¸™à¸”: ${issue.origin ?? "à¸„à¹ˆà¸²"} à¸„à¸§à¸£à¸¡à¸µ${adj} ${issue.maximum.toString()} ${sizing.unit ?? "à¸£à¸²à¸¢à¸à¸²à¸£"}`;
        return `à¹€à¸à¸´à¸™à¸à¸³à¸«à¸™à¸”: ${issue.origin ?? "à¸„à¹ˆà¸²"} à¸„à¸§à¸£à¸¡à¸µ${adj} ${issue.maximum.toString()}`;
      }
      case "too_small": {
        const adj = issue.inclusive ? "à¸­à¸¢à¹ˆà¸²à¸‡à¸™à¹‰à¸­à¸¢" : "à¸¡à¸²à¸à¸à¸§à¹ˆà¸²";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return `à¸™à¹‰à¸­à¸¢à¸à¸§à¹ˆà¸²à¸à¸³à¸«à¸™à¸”: ${issue.origin} à¸„à¸§à¸£à¸¡à¸µ${adj} ${issue.minimum.toString()} ${sizing.unit}`;
        }

        return `à¸™à¹‰à¸­à¸¢à¸à¸§à¹ˆà¸²à¸à¸³à¸«à¸™à¸”: ${issue.origin} à¸„à¸§à¸£à¸¡à¸µ${adj} ${issue.minimum.toString()}`;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") {
          return `à¸£à¸¹à¸›à¹à¸šà¸šà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸•à¹‰à¸­à¸‡à¸‚à¸¶à¹‰à¸™à¸•à¹‰à¸™à¸”à¹‰à¸§à¸¢ "${_issue.prefix}"`;
        }
        if (_issue.format === "ends_with") return `à¸£à¸¹à¸›à¹à¸šà¸šà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸•à¹‰à¸­à¸‡à¸¥à¸‡à¸—à¹‰à¸²à¸¢à¸”à¹‰à¸§à¸¢ "${_issue.suffix}"`;
        if (_issue.format === "includes") return `à¸£à¸¹à¸›à¹à¸šà¸šà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡à¸•à¹‰à¸­à¸‡à¸¡à¸µ "${_issue.includes}" à¸­à¸¢à¸¹à¹ˆà¹ƒà¸™à¸‚à¹‰à¸­à¸„à¸§à¸²à¸¡`;
        if (_issue.format === "regex") return `à¸£à¸¹à¸›à¹à¸šà¸šà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸•à¹‰à¸­à¸‡à¸•à¸£à¸‡à¸à¸±à¸šà¸£à¸¹à¸›à¹à¸šà¸šà¸—à¸µà¹ˆà¸à¸³à¸«à¸™à¸” ${_issue.pattern}`;
        return `à¸£à¸¹à¸›à¹à¸šà¸šà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return `à¸•à¸±à¸§à¹€à¸¥à¸‚à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¸•à¹‰à¸­à¸‡à¹€à¸›à¹‡à¸™à¸ˆà¸³à¸™à¸§à¸™à¸—à¸µà¹ˆà¸«à¸²à¸£à¸”à¹‰à¸§à¸¢ ${issue.divisor} à¹„à¸”à¹‰à¸¥à¸‡à¸•à¸±à¸§`;
      case "unrecognized_keys":
        return `à¸žà¸šà¸„à¸µà¸¢à¹Œà¸—à¸µà¹ˆà¹„à¸¡à¹ˆà¸£à¸¹à¹‰à¸ˆà¸±à¸: ${util.joinValues(issue.keys, ", ")}`;
      case "invalid_key":
        return `à¸„à¸µà¸¢à¹Œà¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡à¹ƒà¸™ ${issue.origin}`;
      case "invalid_union":
        return "à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡: à¹„à¸¡à¹ˆà¸•à¸£à¸‡à¸à¸±à¸šà¸£à¸¹à¸›à¹à¸šà¸šà¸¢à¸¹à¹€à¸™à¸µà¸¢à¸™à¸—à¸µà¹ˆà¸à¸³à¸«à¸™à¸”à¹„à¸§à¹‰";
      case "invalid_element":
        return `à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡à¹ƒà¸™ ${issue.origin}`;
      default:
        return `à¸‚à¹‰à¸­à¸¡à¸¹à¸¥à¹„à¸¡à¹ˆà¸–à¸¹à¸à¸•à¹‰à¸­à¸‡`;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}





