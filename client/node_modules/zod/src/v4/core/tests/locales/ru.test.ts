import { describe, expect, it } from "vitest";
import ru from "../../../locales/ru.js";

describe("Russian localization", () => {
  const localeError = ru().localeError;

  describe("pluralization rules", () => {
    for (const { type, cases } of TEST_CASES) {
      describe(`${type} pluralization`, () => {
        for (const { count, expected } of cases) {
          it(`correctly pluralizes ${count} ${type}`, () => {
            const error = localeError({
              code: "too_small",
              minimum: count,
              type: "number",
              inclusive: true,
              path: [],
              origin: type,
              input: count - 1,
            });

            expect(error).toContain(expected);
          });
        }
      });
    }

    it("handles negative numbers correctly", () => {
      const error = localeError({
        code: "too_small",
        minimum: -2,
        type: "number",
        inclusive: true,
        path: [],
        origin: "array",
        input: -3,
      });

      expect(error).toContain("-2 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°");
    });

    it("handles zero correctly", () => {
      const error = localeError({
        code: "too_small",
        minimum: 0,
        type: "number",
        inclusive: true,
        path: [],
        origin: "array",
        input: -1,
      });

      expect(error).toContain("0 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²");
    });

    it("handles bigint values correctly", () => {
      const error = localeError({
        code: "too_small",
        minimum: BigInt(21),
        type: "number",
        inclusive: true,
        path: [],
        origin: "array",
        input: BigInt(20),
      });

      expect(error).toContain("21 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚");
    });
  });
});

const TEST_CASES = [
  {
    type: "array",
    cases: [
      { count: 1, expected: "1 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 2, expected: "2 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°" },
      { count: 5, expected: "5 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 11, expected: "11 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 21, expected: "21 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 22, expected: "22 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°" },
      { count: 25, expected: "25 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 101, expected: "101 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 111, expected: "111 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
    ],
  },
  {
    type: "set",
    cases: [
      { count: 1, expected: "1 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 2, expected: "2 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°" },
      { count: 5, expected: "5 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 11, expected: "11 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 21, expected: "21 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 22, expected: "22 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð°" },
      { count: 25, expected: "25 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
      { count: 101, expected: "101 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚" },
      { count: 111, expected: "111 ÑÐ»ÐµÐ¼ÐµÐ½Ñ‚Ð¾Ð²" },
    ],
  },
  {
    type: "string",
    cases: [
      { count: 1, expected: "1 ÑÐ¸Ð¼Ð²Ð¾Ð»" },
      { count: 2, expected: "2 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð°" },
      { count: 5, expected: "5 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²" },
      { count: 11, expected: "11 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²" },
      { count: 21, expected: "21 ÑÐ¸Ð¼Ð²Ð¾Ð»" },
      { count: 22, expected: "22 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð°" },
      { count: 25, expected: "25 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²" },
    ],
  },
  {
    type: "file",
    cases: [
      { count: 0, expected: "0 Ð±Ð°Ð¹Ñ‚" },
      { count: 1, expected: "1 Ð±Ð°Ð¹Ñ‚" },
      { count: 2, expected: "2 Ð±Ð°Ð¹Ñ‚Ð°" },
      { count: 5, expected: "5 Ð±Ð°Ð¹Ñ‚" },
      { count: 11, expected: "11 Ð±Ð°Ð¹Ñ‚" },
      { count: 21, expected: "21 Ð±Ð°Ð¹Ñ‚" },
      { count: 22, expected: "22 Ð±Ð°Ð¹Ñ‚Ð°" },
      { count: 25, expected: "25 Ð±Ð°Ð¹Ñ‚" },
      { count: 101, expected: "101 Ð±Ð°Ð¹Ñ‚" },
      { count: 110, expected: "110 Ð±Ð°Ð¹Ñ‚" },
    ],
  },
] as const;





