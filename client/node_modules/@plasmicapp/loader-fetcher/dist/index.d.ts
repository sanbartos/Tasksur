export declare class Api {
    private opts;
    private host;
    private fetch;
    private lastResponse;
    constructor(opts: {
        projects: {
            id: string;
            token: string;
        }[];
        host?: string;
        nativeFetch?: boolean;
        manualRedirect?: boolean;
    });
    fetchLoaderData(projectIds: string[], opts: {
        platform?: "react" | "nextjs" | "gatsby";
        platformOptions?: {
            nextjs?: {
                appDir: boolean;
            };
        };
        preview?: boolean;
        browserOnly?: boolean;
        i18nKeyScheme?: "content" | "hash" | "path";
        i18nTagPrefix?: string;
        skipHead?: boolean;
    }): Promise<LoaderBundleOutput>;
    private parseJsonResponse;
    fetchHtmlData(opts: {
        projectId: string;
        component: string;
        hydrate?: boolean;
        embedHydrate?: boolean;
    }): Promise<LoaderHtmlOutput>;
    private makeGetHeaders;
    private makeAuthHeaders;
    getChunksUrl(bundle: LoaderBundleOutput, modules: CodeModule[]): string;
}

declare interface ApiLoaderBundleOutput {
    modules: {
        browser: (CodeModule | AssetModule)[];
        server: (CodeModule | AssetModule)[];
    };
    components: ComponentMeta[];
    globalGroups: GlobalGroupMeta[];
    projects: ProjectMeta[];
    activeSplits: Split[];
    bundleKey: string | null;
    deferChunksByDefault: boolean;
    disableRootLoadingBoundaryByDefault: boolean;
}

export declare interface AssetModule {
    fileName: string;
    source: string;
    type: "asset";
}

declare interface BareSplit {
    id: string;
    projectId: string;
    name: string;
    externalId?: string;
    description?: string;
    pagesPaths: string[];
}

export declare interface CodeModule {
    fileName: string;
    code: string;
    imports: string[];
    type: "code";
}

export declare interface ComponentMeta {
    id: string;
    usedComponents: string[];
    projectId: string;
    name: string;
    displayName: string;
    cssFile: string;
    path: string | undefined;
    isPage: boolean;
    plumeType?: string;
    entry: string;
    isCode: boolean;
    isGlobalContextProvider: boolean;
    pageMetadata?: PageMetadata;
    metadata?: Record<string, string>;
    serverQueriesExecFuncFileName?: string;
}

export declare interface ExperimentSlice extends Slice {
    prob: number;
}

declare interface ExperimentSplit extends BareSplit {
    type: "experiment";
    slices: ExperimentSlice[];
}

export declare interface FetcherOptions {
    projects: {
        id: string;
        version?: string;
        token: string;
    }[];
    cache?: LoaderBundleCache;
    platform?: "react" | "nextjs" | "gatsby";
    platformOptions?: {
        nextjs?: {
            appDir: boolean;
        };
    };
    preview?: boolean;
    host?: string;
    /**
     * @deprecated use i18n.keyScheme instead
     */
    i18nKeyScheme?: "content" | "hash" | "path";
    i18n?: {
        keyScheme: "content" | "hash" | "path";
        tagPrefix?: string;
    };
    skipHead?: boolean;
    nativeFetch?: boolean;
    manualRedirect?: boolean;
}

export declare interface FontMeta {
    url: string;
}

export declare interface GlobalGroupMeta {
    id: string;
    projectId: string;
    name: string;
    type: string;
    contextFile: string;
    useName: string;
}

declare interface GlobalVariantSplitContent {
    type: "global-variant";
    projectId: string;
    group: string;
    variant: string;
}

export declare function internal_getCachedBundleInNodeServer(opts: FetcherOptions): LoaderBundleOutput | undefined;

export declare interface LoaderBundleCache {
    set: (data: LoaderBundleOutput) => Promise<void>;
    get: () => Promise<LoaderBundleOutput>;
}

export declare interface LoaderBundleOutput extends ApiLoaderBundleOutput {
    filteredIds: Record<string, string[]>;
}

export declare interface LoaderHtmlOutput {
    html: string;
}

export declare interface PageMeta extends ComponentMeta {
    isPage: true;
    path: string;
    plumeType: never;
    pageMetadata: PageMetadata;
}

export declare interface PageMetadata {
    path: string;
    title?: string | null;
    description?: string | null;
    openGraphImageUrl?: string | null;
    canonical?: string | null;
}

export declare class PlasmicModulesFetcher {
    private opts;
    private api;
    private curFetch;
    constructor(opts: FetcherOptions);
    getChunksUrl(bundle: LoaderBundleOutput, modules: CodeModule[]): string;
    fetchAllData(): Promise<LoaderBundleOutput>;
    private getCachedOrFetch;
    private doFetch;
    private cacheBundleInNodeServer;
}

export declare interface ProjectMeta {
    id: string;
    teamId?: string;
    indirect?: boolean;
    name: string;
    version: string;
    remoteFonts: FontMeta[];
    globalContextsProviderFileName: string;
}

export declare interface SegmentSlice extends Slice {
    cond: any;
}

declare interface SegmentSplit extends BareSplit {
    type: "segment";
    slices: SegmentSlice[];
}

declare interface Slice {
    id: string;
    contents: GlobalVariantSplitContent[];
    externalId?: string;
}

export declare type Split = ExperimentSplit | SegmentSplit;

export { }





